Arrays:
-------

Introduction to array:
~~~~~~~~~~~~~~~~~~~~~~
=> a variable can hold only one value at a time.

Ex:
---
	a = 10;
	System.out.println(a);//10
	a = 20;
	System.out.println(a);//20

=> if we want to represent/hold more values, then variables are not recommended.

Ex:
---
	int s1;
	int s1,s2;
	int s1,s2,s3;
	int s1,s2,s3,s4;
	int s1,s2,s3,s4,s5;
	int s1,s2,s3,s4,s5,.....s50;

=> sum of all these marks

	s1+s2+s3+s4+s5+.....+s50

=> to overcome these problems, we should go for arrays.

=> an array is group of or collection of similar type of elements or values or items.

=> all these values must be of same type.

=> all these values are identified by using common name.

=> all these values we can access by using 'index' concept.

Ex:
---
	int a1,a2,a3,a4,a5,a6,a7,a8,a9,a10;

	int a[10];

	a[0]
	a[1]
	a[2]
	.
	.
	a[n-1]

	where n= number of elements in array
	index  = 0 to n-1 ---> 0 to 9
	[] -----> subscripts

=> In java array is considered as an object.

=> In java array is a data structure.

Ex:
---
	c --------> int a[10];
	c++ ------> int a[10];
	java -----> int a[] = new int[10];
	py -------> arrays concept is not there (list or array module)

advantages of arrays:
---------------------
1. it collects group of items.
2. only one name is sufficient to represent all the values.
3. we have index support is there.
4. insertion order is preserved.
5. duplicate values are allowed.

disadvantage of arrays:
-----------------------
1. it is fixed in size [not growable].
2. it collects only same type of elements [homogeneous].
3. no inbuilt method. (no predefined methods).

variables -----> arrays ------> Abstract Data Type (ADTs) or Collections

a.length() ----> invalid
a.length ------> valid

declaration of an array:
~~~~~~~~~~~~~~~~~~~~~~~~
Once if we are using any variable or an array. In java, first we have to declare that variable. To declare arrays in java the following syntax is used.

syntax:
-------
		datatype arrayname[];
		datatype arrayname[][];
		datatype arrayname[][][];
		datatype arrayname[]......[];

		[] ----> 1-D
		[][] --> 2-D
		[]..[]-> n-D

Ex:
---
		int a[];
		int []a;
		int[] a; ----> recommended

Ex:
---
		int a[][];
		int [][]a;
		int []a[];
		int[] a[];
		int[] []a;
		int[][] a; ----> recommended

Note: At the time of declaration of an array, we should not provide size of the array like other programming languages.

	int a[]; ------> valid in java but invalid in c-lang
	int a[3]; -----> valid in c-lang but invalid in java

Note: Internally arrays are created in java by ADTs only.

class [I {}
class [[I{}
class [F {}

Ex:
---
import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		int a[] = {1,2,3,4};
		float b[] = {1.2F,3.4F};
		int c[][]={{1,2},{3,4}};

		System.out.println(a);
		System.out.println(b);
		System.out.println(c);
	}
}

output:
-------
[I@76ed5528
[F@2c7b84de
[[I@3fee733d


creation of an array:
~~~~~~~~~~~~~~~~~~~~~
Once if an array is declared, we have to allocate memory for that array, it is possible by using creation of array, we can use 'new' keyword to create array in java. the following syntax is used to create an array.

syntax:
-------
		datatype arrayname[];
		arrayname = new datatype[size];

		or

		datatype arrayname[] = new datatype[size];

Ex:
---
		int a[];
		a = new int[4];

		or

		int a[] = new int[4];

Ex:
---
		int a[] = new int[3];
		double b[] = new double[5];
		String names[] = new String[100];
		Emp e[] = new Emp[10];

		int x[][] = new int[3][3];

memory representation of an array:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
diagram

intialization of an array:-
~~~~~~~~~~~~~~~~~~~~~~~~~~
In c-lang and c++ programming, default values concept is not existed, hence we have to intialize the values manually. In java, default values concept is there. ie. if we are not providing any intial values, then default values will be considered, if we want we can supply dynamic values manually. the following are the default values.

primitives -------> 0, 0.0, '', false
objects ----------> null

Ex:
---
		int a[] = new int[3];

		System.out.println(a[0]);//0
		System.out.println(a[1]);//0
		System.out.println(a[2]);//0

Ex:
---
		int a[] = new int[3];

		System.out.println(a[0]);//0
		System.out.println(a[1]);//0
		System.out.println(a[2]);//0

		a[0] = 111;
		a[1] = 222;
		a[2] = 333;

		System.out.println(a[0]);//111
		System.out.println(a[1]);//222
		System.out.println(a[2]);//333

Ex:
---
		boolean b[] = new boolean[4];

		System.out.println(b[0]);//false
		System.out.println(b[1]);//false
		System.out.println(b[2]);//false
		System.out.println(b[3]);//false

Ex:
---
		boolean b[] = new boolean[4];

		b[0] = true;
		b[2] = true;

		System.out.println(b[0]);//true
		System.out.println(b[1]);//false
		System.out.println(b[2]);//true
		System.out.println(b[3]);//false

Ex:
---
		String names[] = new String[3];

		names[1] = "Prakash";

		System.out.println(names[0]);//null
		System.out.println(names[1]);//Prakash
		System.out.println(names[2]);//null


array declaration, creation and intialization in single line
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Ex:
---
		int a[];
		a = new int[3];
		a[0] = 111;
		a[1] = 222;
		a[2] = 333;

		or

		int a[] = {111, 222, 333};

		size: 3
		dim : 1
		name: a
		type: int

Ex:
---
		int a[][] = {{11, 22, 33},{44, 55},{66, 77, 88, 99}};

		a[0][0] ----> 11
		a[0][1] ----> 22
		a[0][2] ----> 33

		a[1][0] ----> 44
		a[1][1] ----> 55

		a[2][0] ----> 66
		a[2][1] ----> 77
		a[2][2] ----> 88
		a[2][3] ----> 99




length identifier:-
~~~~~~~~~~~~~~~~~~~
it is used to find length of the given array.

Ex:
---
	int a[] = new int[4];

	System.out.println(a.length); ----> 4

Ex:
---
	int a[][] = new int[3][4];

	System.out.println(a.length); ----> error

	System.out.println(a[0].length); ----> 4
	System.out.println(a[1].length); ----> 4
	System.out.println(a[2].length); ----> 4

Ex:
---
	int a[][] = {{11, 22, 33},{44, 55},{66, 77, 88, 99}};

	a[0].length -----> 3
	a[1].length -----> 2
	a[2].length -----> 4




index concept:
--------------
=> we can traverse or retrive array elements by using 'index' concept.
=> index is always an integer value.
=> it must be always +ve index.
=> we have to enclose this index value inside subscript [].

Ex:
---
import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		int a[] = new int[3];

		System.out.println(a[0]);//0
		System.out.println(a[1]);//0
		System.out.println(a[2]);//0

		a[0] = 111;
		a[1] = 222;
		a[2] = 333;

		System.out.println(a[0]);//111
		System.out.println(a[1]);//222
		System.out.println(a[2]);//333
	}
}


output:
-------
0
0
0
111
222
333

ArrayIndexOutOfBoundsException:-
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
If we are trying to access the elements, which are not in our range (0 to len of array-1), then we are getting runtime error saying "ArrayIndexOutOfBoundsException".

Ex:
---
import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		int a[] = new int[3];

		System.out.println(a[4]);//AIOBE
	}
}


output:
-------
Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length 3
        at Test.main(Test.java:9)

NegativeArraySizeException:-
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
when we are creating an array, if we are trying to provide size of the array as negative numbers, then we will get runtime error saying "NegativeArraySizeException".

Ex:
---
import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		int a[] = new int[-3];
	}
}

output:
-------
Exception in thread "main" java.lang.NegativeArraySizeException: -3
        at Test.main(Test.java:7)

Reading and Writing Array Elements:-
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
If we want perform operations on array, then we have to ready dynamic data from the user and we have to print the array on console. to perform these activites the following are the syntaxes for reading and writing array elements.

Reading:-
-------
Scanner -----> it is used to read primtive data, i.e. int, float, char, boolean string

Scanner obj = new Scanner(System.in);

obj.nextInt()         ------> read int value
obj.nextDouble()          --> read double value
obj.nextBoolean()         --> read boolean value
obj.nextLine()        ------> read string value
obj.nextLine().charAt(0) ---> read char value

Writing array elements:
-----------------------
The following are the different ways to print array elements on the console.

1) index concept
2) while loop
3) for loop
4) for each loop
5) Arrays.toString(--)

Ex:
---
		int a[] = {11, 22, 55, 33};

		index:
				a[0]
				a[1]
				a[2]
				a[3]

		while:

				index=0;
				while(index<a.length)
				{
					print a[index]
					index++;
				}

		for loop:

				for(i=0;i<a.length;i++)
				{
					print a[i]
				}

		for each loop:

				for(int item:a)
				{
					print item
				}

		Arrays.toString(--);

				Arrays.toString(a);

				[1, 2, 3, 4, 5]

Ex:
---
import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		Scanner obj = new Scanner(System.in);

		System.out.println("Enter size of the array:");
		int n=obj.nextInt();

		int a[] = new int[n];

		int i;

		System.out.println("Enter "+n+" elements:");
		for(i=0;i<n;i++)
			a[i] = obj.nextInt();

		System.out.println("The array elements are:");
		for(i=0;i<n;i++)
		{
			System.out.println(a[i]);
		}
	}
}

output:
-------
Enter size of the array:
5
Enter 5 elements:
11 22 33 44 55
The array elements are:
11
22
33
44
55

Ex:
---
import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		int a[] = {111, 222, 333, 444, 555};
		int i,n = a.length;

		//by using index concept
		System.out.println("by using index concept");
		System.out.println(a[0]);
		System.out.println(a[1]);
		System.out.println(a[2]);
		System.out.println(a[3]);
		System.out.println(a[4]);

		//by using while loop
		System.out.println("by using while loop..");
		i=0;
		while(i<n)
		{
			System.out.println(a[i]);
			i++;
		}

		//by using for loop
		System.out.println("by using for loop...");
		for(i=0;i<n;i++)
		{
			System.out.println(a[i]);
		}

		//by using for-each loop
		System.out.println("by using for-each loop...");
		for(int item:a)
		{
			System.out.println(item);
		}

		//by using toString
		System.out.println("by using toString method...");
		System.out.println(Arrays.toString(a));

	}
}

output:
-------
by using index concept
111
222
333
444
555
by using while loop..
111
222
333
444
555
by using for loop...
111
222
333
444
555
by using for-each loop...
111
222
333
444
555
by using toString method...
[111, 222, 333, 444, 555]
